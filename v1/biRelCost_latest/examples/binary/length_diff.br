let incr = {contra: (U int) => (U int), 0} in
fix length(z). Lam. Lam. lam l. lam acc. caseL l of 
   nil => acc
 | h::tl => length () [] [] tl (incr acc)
,
let incr = {contra: (U int) => (U int), 0} in
fix length(z). Lam. Lam. lam l. lam acc. caseL l of 
   nil => 0
 | h::tl => incr (length () [] [] tl acc)

<= 0 : unitR => forall i; alpha.  (list[i,alpha] U int) => (U int) => (U int)

--- doesn't work since we need WCET of length