Lam. fix fold(f). lam acc. Lam. Lam. lam l. caseL l of 
   nil =>  acc
 | h::tl => let r = fold f acc [] [] tl in f h r,

Lam. fix fold(f). lam acc. Lam. Lam. lam l. caseL l of 
   nil =>  acc
 | h::tl => let r = fold f (f h acc) [] [] tl in r

 <= 0 : forall t.  (U (int -> bool [max,t]->  bool, int ->-> bool [min, t]-> bool)) => (U bool) => forall i; alpha. (list [i, alpha] U int) [diff, 5 * i] ->  U bool

